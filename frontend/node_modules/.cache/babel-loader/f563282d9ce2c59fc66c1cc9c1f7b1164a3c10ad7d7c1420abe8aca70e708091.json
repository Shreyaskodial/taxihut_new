{"ast":null,"code":"const express = require('express');\nconst nodemailer = require('nodemailer'); // For sending emails\nconst router = express.Router();\nlet otpStore = {}; // Temporary storage for OTPs\n\n// Register user and send OTP\nrouter.post('/register', async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n  const otp = Math.floor(100000 + Math.random() * 900000); // Generate a 6-digit OTP\n  otpStore[email] = otp;\n\n  // Send OTP via email (using nodemailer)\n  const transporter = nodemailer.createTransport({\n    service: 'gmail',\n    auth: {\n      user: 'your-email@gmail.com',\n      pass: 'your-email-password'\n    }\n  });\n  const mailOptions = {\n    from: 'your-email@gmail.com',\n    to: email,\n    subject: 'Your OTP for Registration',\n    text: `Your OTP is ${otp}. It is valid for 10 minutes.`\n  };\n  try {\n    await transporter.sendMail(mailOptions);\n    res.status(200).json({\n      message: 'OTP sent to your email.'\n    });\n  } catch (error) {\n    console.error(\"Email Error:\", error);\n    res.status(500).json({\n      message: 'Error sending OTP.'\n    });\n  }\n});\n\n// Verify OTP\nrouter.post('/verify-otp', (req, res) => {\n  const {\n    email,\n    otp\n  } = req.body;\n  if (otpStore[email] && otpStore[email] === parseInt(otp)) {\n    delete otpStore[email]; // Remove OTP after successful verification\n    res.status(200).json({\n      message: 'Registration successful!'\n    });\n  } else {\n    res.status(400).json({\n      message: 'Invalid OTP. Please try again.'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","nodemailer","router","Router","otpStore","post","req","res","name","email","password","body","otp","Math","floor","random","transporter","createTransport","service","auth","user","pass","mailOptions","from","to","subject","text","sendMail","status","json","message","error","console","parseInt","module","exports"],"sources":["/home/exalogic/Documents/testing/taxi_new/11/taxihut_new/frontend/src/pages/Register.js"],"sourcesContent":["const express = require('express');\nconst nodemailer = require('nodemailer'); // For sending emails\nconst router = express.Router();\n\nlet otpStore = {}; // Temporary storage for OTPs\n\n// Register user and send OTP\nrouter.post('/register', async (req, res) => {\n    const { name, email, password } = req.body;\n    const otp = Math.floor(100000 + Math.random() * 900000); // Generate a 6-digit OTP\n    otpStore[email] = otp;\n\n    // Send OTP via email (using nodemailer)\n    const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n            user: 'your-email@gmail.com',\n            pass: 'your-email-password',\n        },\n    });\n\n    const mailOptions = {\n        from: 'your-email@gmail.com',\n        to: email,\n        subject: 'Your OTP for Registration',\n        text: `Your OTP is ${otp}. It is valid for 10 minutes.`,\n    };\n\n    try {\n        await transporter.sendMail(mailOptions);\n        res.status(200).json({ message: 'OTP sent to your email.' });\n    } catch (error) {\n        console.error(\"Email Error:\", error);\n        res.status(500).json({ message: 'Error sending OTP.' });\n    }\n});\n\n// Verify OTP\nrouter.post('/verify-otp', (req, res) => {\n    const { email, otp } = req.body;\n    if (otpStore[email] && otpStore[email] === parseInt(otp)) {\n        delete otpStore[email]; // Remove OTP after successful verification\n        res.status(200).json({ message: 'Registration successful!' });\n    } else {\n        res.status(400).json({ message: 'Invalid OTP. Please try again.' });\n    }\n});\n\nmodule.exports = router;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1C,MAAME,MAAM,GAAGH,OAAO,CAACI,MAAM,CAAC,CAAC;AAE/B,IAAIC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEnB;AACAF,MAAM,CAACG,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;EAC1C,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACzDX,QAAQ,CAACK,KAAK,CAAC,GAAGG,GAAG;;EAErB;EACA,MAAMI,WAAW,GAAGf,UAAU,CAACgB,eAAe,CAAC;IAC3CC,OAAO,EAAE,OAAO;IAChBC,IAAI,EAAE;MACFC,IAAI,EAAE,sBAAsB;MAC5BC,IAAI,EAAE;IACV;EACJ,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAG;IAChBC,IAAI,EAAE,sBAAsB;IAC5BC,EAAE,EAAEf,KAAK;IACTgB,OAAO,EAAE,2BAA2B;IACpCC,IAAI,EAAE,eAAed,GAAG;EAC5B,CAAC;EAED,IAAI;IACA,MAAMI,WAAW,CAACW,QAAQ,CAACL,WAAW,CAAC;IACvCf,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpCxB,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAqB,CAAC,CAAC;EAC3D;AACJ,CAAC,CAAC;;AAEF;AACA5B,MAAM,CAACG,IAAI,CAAC,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEE,KAAK;IAAEG;EAAI,CAAC,GAAGN,GAAG,CAACK,IAAI;EAC/B,IAAIP,QAAQ,CAACK,KAAK,CAAC,IAAIL,QAAQ,CAACK,KAAK,CAAC,KAAKwB,QAAQ,CAACrB,GAAG,CAAC,EAAE;IACtD,OAAOR,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAC;IACxBF,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA2B,CAAC,CAAC;EACjE,CAAC,MAAM;IACHvB,GAAG,CAACqB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiC,CAAC,CAAC;EACvE;AACJ,CAAC,CAAC;AAEFI,MAAM,CAACC,OAAO,GAAGjC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}